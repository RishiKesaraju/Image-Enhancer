import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, UpSampling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, array_to_img, load_img
import matplotlib.pyplot as plt
import logging

# Setup logging
logging.basicConfig(level=logging.INFO)

# Define image dimensions
IMG_HEIGHT, IMG_WIDTH = 128, 128
CHANNELS = 3

# Load and preprocess images
def load_images_from_directory(directory, target_size=(IMG_HEIGHT, IMG_WIDTH)):
    images = []
    for filename in os.listdir(directory):
        img_path = os.path.join(directory, filename)
        if os.path.isfile(img_path):
            img = load_img(img_path, target_size=target_size)
            if img is not None:
                images.append(img_to_array(img))
    return np.array(images)

# Example directories (replace with actual directories)
train_dir = 'path/to/train_images'
test_dir = 'path/to/test_images'

logging.info("Loading training images...")
train_images = load_images_from_directory(train_dir)
logging.info(f"Loaded {len(train_images)} training images")

logging.info("Loading testing images...")
test_images = load_images_from_directory(test_dir)
logging.info(f"Loaded {len(test_images)} testing images")

# Normalize images
train_images = train_images / 255.0
test_images = test_images / 255.0

# Data augmentation
datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

# Build the CNN model
logging.info("Building the CNN model...")
model = Sequential([
    Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(IMG_HEIGHT, IMG_WIDTH, CHANNELS)),
    MaxPooling2D((2, 2), padding='same'),
    Conv2D(128, (3, 3), activation='relu', padding='same'),
    MaxPooling2D((2, 2), padding='same'),
    Conv2D(256, (3, 3), activation='relu', padding='same'),
    MaxPooling2D((2, 2), padding='same'),
    Conv2D(256, (3, 3), activation='relu', padding='same'),
    UpSampling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu', padding='same'),
    UpSampling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu', padding='same'),
    UpSampling2D((2, 2)),
    Conv2D(3, (3, 3), activation='sigmoid', padding='same')
])

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
batch_size = 32
epochs = 50

logging.info("Training the CNN model...")
model.fit(datagen.flow(train_images, train_images, batch_size=batch_size),
          epochs=epochs,
          validation_data=(test_images, test_images))

# Save the model
model.save('image_enhancer_model.h5')

# Load and enhance a test image
def enhance_image(image_path, model):
    img = load_img(image_path, target_size=(IMG_HEIGHT, IMG_WIDTH))
    img_array = img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    
    enhanced_img_array = model.predict(img_array)
    enhanced_img = array_to_img(enhanced_img_array[0])
    
    return enhanced_img

# Example usage
test_image_path = 'path/to/single/test_image.jpg'
logging.info(f"Enhancing image: {test_image_path}")
enhanced_image = enhance_image(test_image_path, model)
enhanced_image.show()

# Plot original and enhanced images for comparison
def plot_comparison(original_image_path, enhanced_image):
    original_img = load_img(original_image_path, target_size=(IMG_HEIGHT, IMG_WIDTH))
    
    fig, axes = plt.subplots(1, 2, figsize=(10, 5))
    axes[0].imshow(original_img)
    axes[0].set_title("Original Image")
    axes[0].axis('off')
    
    axes[1].imshow(enhanced_image)
    axes[1].set_title("Enhanced Image")
    axes[1].axis('off')
    
    plt.show()

# Show comparison
plot_comparison(test_image_path, enhanced_image)

# Additional functions for more comprehensive code

# Function to display a batch of images
def display_batch_of_images(images, title="Batch of Images"):
    fig, axes = plt.subplots(4, 8, figsize=(15, 8))
    fig.suptitle(title)
    axes = axes.flatten()
    
    for img, ax in zip(images, axes):
        ax.imshow(img)
        ax.axis('off')
    
    plt.tight_layout()
    plt.show()

# Display a batch of training images
display_batch_of_images(train_images[:32], title="Batch of Training Images")

# Function to evaluate the model on test set
def evaluate_model_on_test_set(model, test_images):
    loss = model.evaluate(test_images, test_images)
    logging.info(f"Model evaluation loss: {loss}")

# Evaluate model
evaluate_model_on_test_set(model, test_images)

# Function to save a batch of enhanced images
def save_enhanced_images(model, images, output_dir):
    os.makedirs(output_dir, exist_ok=True)
    for i, img_array in enumerate(images):
        enhanced_img_array = model.predict(np.expand_dims(img_array, axis=0))
        enhanced_img = array_to_img(enhanced_img_array[0])
        enhanced_img.save(os.path.join(output_dir, f"enhanced_image_{i}.png"))

# Save enhanced images
output_dir = 'enhanced_images'
logging.info(f"Saving enhanced images to: {output_dir}")
save_enhanced_images(model, test_images[:10], output_dir)

# Function to summarize the model
def summarize_model(model):
    logging.info("Summarizing the model...")
    model.summary()

# Summarize the model
summarize_model(model)

# Function to visualize data augmentation
def visualize_data_augmentation(datagen, image_array):
    sample_image = np.expand_dims(image_array[0], axis=0)
    fig, ax = plt.subplots(1, 5, figsize=(20, 5))
    ax = ax.flatten()
    
    for i, aug_img in enumerate(datagen.flow(sample_image, batch_size=1)):
        if i >= 5:
            break
        ax[i].imshow(aug_img[0])
        ax[i].axis('off')
    
    plt.show()

# Visualize data augmentation
visualize_data_augmentation(datagen, train_images)

# Function to log model architecture
def log_model_architecture(model):
    logging.info("Model Architecture:")
    for layer in model.layers:
        logging.info(f"{layer.name}: {layer.output_shape}")

# Log model architecture
log_model_architecture(model)

# Function to compare multiple enhanced images
def compare_multiple_images(image_paths, model):
    fig, axes = plt.subplots(len(image_paths), 2, figsize=(10, 5 * len(image_paths)))
    for i, image_path in enumerate(image_paths):
        original_img = load_img(image_path, target_size=(IMG_HEIGHT, IMG_WIDTH))
        enhanced_img = enhance_image(image_path, model)
        
        axes[i, 0].imshow(original_img)
        axes[i, 0].set_title("Original Image")
        axes[i, 0].axis('off')
        
        axes[i, 1].imshow(enhanced_img)
        axes[i, 1].set_title("Enhanced Image")
        axes[i, 1].axis('off')
    
    plt.tight_layout()
    plt.show()

# Example usage for comparing multiple images
image_paths = ['path/to/image1.jpg', 'path/to/image2.jpg', 'path/to/image3.jpg']
compare_multiple_images(image_paths, model)
